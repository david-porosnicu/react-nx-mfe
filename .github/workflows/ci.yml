name: CI & Deploy

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  # 1️⃣ Lint & Unit Tests (runs on PR and on push)
  test:
    name: Lint & Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Lint affected projects
        run: npx nx affected:lint --base=origin/main --head=HEAD

      - name: Test affected projects
        run: npx nx affected:test --base=origin/main --head=HEAD

  # 2️⃣ Playwright E2E (only on push to main)
  e2e:
    name: Playwright E2E
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm ci

      # 1) Install system deps for Playwright
      - name: Install Playwright dependencies
        run: npx playwright install-deps

      # 2) Run your E2E, forwarding to Playwright
      - name: Run host E2E tests
        run: npx nx e2e host-e2e
  # 3️⃣ Build & Deploy to S3 (only on push to main)
  deploy:
    name: Build & Deploy
    needs: [test, e2e]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1 # adjust if you used a different region

      - name: Install dependencies
        run: npm ci

      # 1) Build all affected projects
      - name: Build affected projects
        run: npx nx affected:build --base=origin/main --head=HEAD --configuration=production

      # 2) Deploy each affected app in dist/apps/<app> to s3://my-mfe-workspace/<app>
      - name: Deploy affected apps to S3
        shell: bash
        run: |
          set -euxo pipefail

          # Ensure we have main locally so affected:apps works
          git fetch origin main:main

          # Get your list of changed apps (use local main)
          apps=$(npx nx affected:apps --plain --base=main --head=HEAD || true)

          if [[ -z "$apps" ]]; then
            echo "No affected apps to deploy."
            exit 0
          fi

          echo "Deploying these apps: $apps"
          for app in $apps; do
            dist="dist/apps/$app"
            bucket="s3://my-mfe-workspace/$app"

            if [[ -d "$dist" ]]; then
              echo "→ syncing $dist → $bucket"
              aws s3 sync "$dist" "$bucket" --delete
            else
              echo "⚠️  Skipping $app; directory $dist does not exist."
            fi
          done
